// Foundation's strip-unit function
/// Removes the unit from a numeric value
///
/// @param {Number} $value - The value to strip unit from
///
/// @return {Number} The number, without its unit
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

$box-shadow--inset: inset 0 0 0 var(--button-border-width) currentColor;
$box-shadow--elevation: 0 var(--shadow-elevation__y) var(--shadow-elevation__color);
$transform--elevate: translateY(calc(-1 * (var(--shadow-elevation__y) - var(--original-elevation))));

@mixin in-selector($selector: null) {
  @if $selector {
    &#{$selector} {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin shadow-with-hover-transition(
  $original-elevation: var(--elevation),
  $hover-elevation: var(--elevation-high),
  $hover: true,
  $active: true,
  $selector: null,
  $transition-duration: 0.2s
) {
  --original-elevation: #{$original-elevation};
  --shadow-elevation__y: var(--original-elevation);
  --hover-transform: ;
  --transition: #{$transition-duration} ease-in-out;

  @include in-selector($selector) {
    box-shadow: $box-shadow--elevation;
    transform: var(--hover-transform);
    transition: var(--transition);
    transition-property: transform, box-shadow;
  }

  @if ($hover) {
    &:hover {
      --shadow-elevation__y: #{$hover-elevation};
      --hover-transform: #{$transform--elevate};
    }
  }
  
  @if $active {
    &:active {
      --shadow-elevation__y: var(--elevation-low);
      // Necessary for touch as the element won't be hovered
      --hover-transform: #{$transform--elevate};

      @include in-selector($selector) {
        transition: none;
      }
    }
  } 
}